# SICONOS - PYTHON : bouncing ball example

import pySiconos;
model = pySiconos.Model();

#===============================
model.createModel(0, 10);
model.display();

nsds = model.createNonSmoothDynamicalSystem( False );
nsds.display();
print "=== creation des DSs ===";
sv = pySiconos.SimpleVector();

q0 = pySiconos.SimpleVector(3);
q0.zero();
q0.setValue(0, 1.0);

v0 = pySiconos.SimpleVector(3);
v0.zero();
#v0.setValue(0, 1.0);

mass = pySiconos.SiconosMatrix(3, 3);
mass.setValue(0,0, 1.0);mass.setValue(0,1, 0.0);mass.setValue(0,2, 0.0);
mass.setValue(1,0, 0.0);mass.setValue(1,1, 1.0);mass.setValue(1,2, 0.0);
mass.setValue(2,0, 0.0);mass.setValue(2,1, 0.0);mass.setValue(2,2, 1.0);

K = pySiconos.SiconosMatrix(3, 3);
K.setValue(0,0, 0.0);K.setValue(0,1, 0.0);K.setValue(0,2, 0.0);
K.setValue(1,0, 0.0);K.setValue(1,1, 0.0);K.setValue(1,2, 0.0);
K.setValue(2,0, 0.0);K.setValue(2,1, 0.0);K.setValue(2,2, 0.0);

mC = pySiconos.SiconosMatrix(3, 3);
mC.setValue(0,0, 0.0);mC.setValue(0,1, 0.0);mC.setValue(0,2, 0.0);
mC.setValue(1,0, 0.0);mC.setValue(1,1, 0.0);mC.setValue(1,2, 0.0);
mC.setValue(2,0, 0.0);mC.setValue(2,1, 0.0);mC.setValue(2,2, 0.0);

ds1 = nsds.addLagrangianLinearTIDS(1, 3, q0, v0, mass,"../sample/BouncingBall/BallPlugin:ballFExt", K, mC);

q0_ = pySiconos.SimpleVector(1);
q0_.zero();

v0_ = pySiconos.SimpleVector(1);
v0_.zero();

mass_ = pySiconos.SiconosMatrix(1,1); mass_.setValue(0,0, 1.0);
K_ = pySiconos.SiconosMatrix(1, 1); K_.setValue(0,0, 0.0);
C_ = pySiconos.SiconosMatrix(1, 1); C_.setValue(0,0, 0.0);

ds2 = nsds.addLagrangianLinearTIDS(2, 1, q0_, v0_, mass_,"../sample/BouncingBall/BallPlugin:groundFExt", K_, C_);

print"=== creation des Interactions ===";
vect = pySiconos.intVector(1);
vect[0] = 0;

dsVect = pySiconos.dsVector(2);
dsVect[0] = ds1;
dsVect[1] = ds2;

H = pySiconos.SiconosMatrix(1,4);
H.setValue(0,0,1.0); H.setValue(0,1,0.0); H.setValue(0,2,0.0) ;H.setValue(0,3,-0.0);

b = pySiconos.SimpleVector(1);
b.zero();

inter = nsds.addInteraction(1, 1, vect, dsVect);
inter.createLagrangianLinearR(H, b);
inter.createNewtonImpactLawNSL(0.9);

s = model.createTimeStepping();

tk = pySiconos.intVector(2);
tk[0] = 0; tk[1] = 1;

td = s.createTimeDiscretisation(0.005, 1, sv, 0.0, 0.0, True);

osi = s.addMoreau(td, ds1, 1.0);
osi = s.addMoreau(td, ds2, 1.0);

M = pySiconos.SiconosMatrix(1,1);
M.setValue(0,0, 0.0);
b.setValue(0, 1.0);

osnsp = s.createLCP();
lcp = pySiconos.LCP.convert(osnsp);
lcp.setGsnlAlgorithm("LcpSolving", 0.0001, "max", 101);
lcp.setN(1);
lcp.setM(M);
lcp.setQ(b);
#===============================

# DS
ball = pySiconos.LagrangianLinearTIDS.convert(model.getNonSmoothDynamicalSystem().getDynamicalSystem(0));
ground = pySiconos.LagrangianLinearTIDS.convert(model.getNonSmoothDynamicalSystem().getDynamicalSystem(1));


#s = model.getStrategy();	
print "strategy will be initialized"; 
s.initialize();
print " **** the strategy is ready ****"; 
t = s.getTimeDiscretisation();
k = t.getK();
N = t.getN();
print " **** time management OK ****"; 


m = pySiconos.SiconosMatrix(N+1, 6);
m.zero()
#time
tmp = k * t.getH();
m.setValue(k, 0, tmp);
# position
m.setValue(k, 1, ball.getQ().getValue(0));
# position
m.setValue(k, 2, ball.getVelocity().getValue(0));
m.setValue(k, 3, ground.getQ().getValue(0));
# position
m.setValue(k, 4, ground.getVelocity().getValue(0));
m.setValue(k, 5, 0.0);
# _________________________________________________

print 'LET''S GO !!!';

while k < N :
	s.nextStep();
	print 'NextStep done';
	k = t.getK();				
	print 'iteration : ', k;
	s.computeFreeState();	
	s.formaliseOneStepNSProblem();			
	s.computeOneStepNSProblem();
	s.updateState();			
#	// Trace Values
#	//time
	m.setValue(k, 0, k*t.getH());
#	// position
	ball = pySiconos.LagrangianLinearTIDS.convert(model.getNonSmoothDynamicalSystem().getDynamicalSystem(0));
	ground = pySiconos.LagrangianLinearTIDS.convert(model.getNonSmoothDynamicalSystem().getDynamicalSystem(1));
	m.setValue(k, 1, (ball.getQ()).getValue(0));
#	// position
	m.setValue(k, 2, (ball.getVelocity()).getValue(0));						
	m.setValue(k, 3, (ground.getQ()).getValue(0));
	m.setValue(k, 4, (ground.getVelocity()).getValue(0));			
	m.setValue(k, 5, (model.getNonSmoothDynamicalSystem().getInteraction(0).getLambda()).getValue(0));    
print 'iterations  done: ', k;		
m.write("result2.dat", "ascii");		
model.saveToXMLFile("./BouncingBall_TIDS2.xml.output");
