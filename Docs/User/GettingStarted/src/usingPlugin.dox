/*! \page doc_usingPlugin Siconos Plug-in Functions

<b>What for? </b>\n
Plug-in system allows users to provide their own functions to describe some specific behavior of existing classes. \n
For example, user can define a function to compute the external forces of a Dynamical System. 

<b> What is a plug-in? </b>

Some classes have pre-defined functions that can be "connected" to external user-defined functions.
Thus a plug-in consists in an "extern C" function, written in a specific file, that must be named "xxxPlugin.cpp", xxx being whatever you want. 

<b> What are the available plug-in?</b>

All the plug-in functions are documented in file DefaultPlugin.cpp. There you can find a complete list of the available plug-in, their signature (ie the \b required types of their arguments) and to which class they are linked. \n
At the time, there are plug-in for:
- DynamicalSystems (see \ref doc_dsPlugin)
- Relations (see \ref doc_relPlugIn)

<b> How to write your own plug-in? </b>

Suppose that you want to define your own way to compute the internal forces for a pre-defined Lagrangian Dynamical System, named myDS.

-# Check that a plug-in is available for what you want (ie see DefaultPlugin.cpp).\n
In \ref doc_dsPlugin, you see that this plug-in exists and in DefaultPlugin.cpp you find:  
\code
extern "C" void computeFInt(unsigned int sizeOfq, double time, const double *q, 
                            const double *velocity, double *fInt, double * param)
{...}
\endcode

-# Create xxxPlugin.cpp file and write your function as an "extern C", using the right signature as given in DefaultPlugin.cpp.\n
Thus, in myPlugin.cpp
\code
extern "C" void myFint(unsigned int sizeOfq, double time, const double *q, 
                       const double *velocity, double *fInt, double * param)
{
 // work on fInt ...
}
\endcode

-# In the main file, associate your function to the object. This is usually done thanks to function called setComputeXXX. 
\code
myDS->setComputeFIntFunction("myPlugin.so", "myFint");
\endcode

From this point, each time you need to compute the internal forces in myDS, myFint will be called.
\code
myDS->computeFInt(time); // call myFint(...) with current values of q, velocity ...
\endcode

<b> Plug-in parameters</b>\n
In all the available plug-in of the platform, it is possible to set user-defined parameters. They consist in the last argument of the plug-in function (a double*). \n
To set a parameter for a specific function, call \e setParameter or \e setParameterPtr( arg1, arg2), arg1 being a pointer to SimpleVector that contains the values of your parameter(s) and arg2 a string, the id of the function. This id is given for each plug-in in the DefaultPlugin.cpp documentation. 

Example:  suppose that you defined a LagrangianDS named lds, and want to set two parameters in the external forces, say \e mu and \e lambda. Then cpp input file looks like:
\code
// In the main file:
double mu , lambda;
// ... give mu and lambda the required values
// ... declare and built your dynamical system
DynamicalSystem * lds = new LagrangianDS(...);
// === First way, with setParameter function ===
// declare and built a SimpleVector of size 2
SimpleVector parameters(2);
parameters(0) = mu;
parameters(1) = lambda;

lds->setParameter(parameters,"fExt");
// In this case, if parameters values are change after this step,
// this won't affect param values inside the dynamical system. 
//
//=== Second way, with setParameterPtr function ===
// declare and built a pointer to SimpleVector of size 2
SimpleVector * parameters = new SimpleVector(2);
(*parameters)(0) = mu;
(*parameters)(1) = lambda;

lds->setParameterPtr(parameters,"fExt");

// Warning: in that case, from this point any change in parameters
// will affect param value in the dynamical system.
//
// Then in the plug-in file, you have access to the parameter values:
extern "C" void computeFExt(unsigned int sizeOfq, double time, double* fExt, double* param)
{
for(unsigned int i = 0; i<sizeOfq;++i)
   fExt[i] = cos(param[1]*time) + param[0] ;
// this means that Fext = cos(lambda t) + mu
}
\endcode

*/
